<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8" />
  <title>QR-Verschl√ºsselung & Entschl√ºsselung</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      background: #f9f9f9;
      max-width: 800px;
      margin: auto;
    }
    button {
      padding: 10px 20px;
      margin: 10px 0;
    }
    canvas, video {
      margin-top: 10px;
      max-width: 300px;
      display: block;
    }
    textarea {
      width: 100%;
      height: 100px;
      margin-top: 10px;
    }
    #output, #decryption-output {
      margin-top: 20px;
      font-weight: bold;
      white-space: pre-wrap;
    }
    #scan-result {
      margin-top: 10px;
      color: green;
      font-weight: bold;
    }
    hr {
      margin: 40px 0;
    }
  </style>
</head>
<body>
  <h1>QR-Verschl√ºsselung & Entschl√ºsselung</h1>

  <!-- Schl√ºssel generieren -->
  <button onclick="generateKey()">1) Schl√ºssel generieren (QR)</button>
  <div id="qrcode"></div>
  <a id="download-link" style="display:none;">QR-Code herunterladen</a>

  <!-- Schl√ºssel scannen -->
  <button onclick="startScan()">2) Schl√ºssel scannen</button>
  <video id="video" autoplay style="display:none;"></video>
  <div id="scan-result"></div>

  <hr>

  <!-- Text verschl√ºsseln -->
  <h2>Verschl√ºsseln</h2>
  <textarea id="text-input" placeholder="Text hier eingeben..."></textarea>
  <button onclick="encryptText()">Text verschl√ºsseln</button>
  <div id="output"></div>

  <hr>

  <!-- Text entschl√ºsseln -->
  <h2>Entschl√ºsseln</h2>
  <textarea id="encrypted-input" placeholder='{"iv":"...","data":"..."}'></textarea>
  <button onclick="decryptText()">Text entschl√ºsseln</button>
  <div id="decryption-output"></div>

  <script src="https://cdn.jsdelivr.net/npm/qrcode@1.5.3/build/qrcode.min.js"></script>
  <script src="https://unpkg.com/html5-qrcode"></script>

  <script>
    let aesKeyRaw = null;
    let aesCryptoKeyEncrypt = null;
    let aesCryptoKeyDecrypt = null;

    async function generateKey() {
      aesKeyRaw = crypto.getRandomValues(new Uint8Array(16));
      const base64Key = btoa(String.fromCharCode(...aesKeyRaw));

      // QR anzeigen
      const qrContainer = document.getElementById('qrcode');
      qrContainer.innerHTML = '';
      QRCode.toCanvas(document.createElement("canvas"), base64Key, function (err, canvas) {
        if (err) console.error(err);
        qrContainer.appendChild(canvas);

        const link = document.getElementById('download-link');
        link.href = canvas.toDataURL();
        link.download = "aes_qr_key.png";
        link.style.display = 'inline';
      });

      aesCryptoKeyEncrypt = await crypto.subtle.importKey(
        "raw",
        aesKeyRaw,
        { name: "AES-GCM" },
        false,
        ["encrypt"]
      );

      // Optional f√ºr Entschl√ºsselung direkt aktivieren
      aesCryptoKeyDecrypt = await crypto.subtle.importKey(
        "raw",
        aesKeyRaw,
        { name: "AES-GCM" },
        false,
        ["decrypt"]
      );
    }

    function startScan() {
      const video = document.getElementById('video');
      video.style.display = 'block';

      const qrCodeScanner = new Html5Qrcode("video");
      Html5Qrcode.getCameras().then(devices => {
        if (devices.length) {
          qrCodeScanner.start(
            { facingMode: "environment" },
            { fps: 10, qrbox: 250 },
            async (decodedText) => {
              try {
                aesKeyRaw = Uint8Array.from(atob(decodedText), c => c.charCodeAt(0));
                aesCryptoKeyEncrypt = await crypto.subtle.importKey(
                  "raw",
                  aesKeyRaw,
                  { name: "AES-GCM" },
                  false,
                  ["encrypt"]
                );
                aesCryptoKeyDecrypt = await crypto.subtle.importKey(
                  "raw",
                  aesKeyRaw,
                  { name: "AES-GCM" },
                  false,
                  ["decrypt"]
                );
                document.getElementById('scan-result').textContent = "‚úîÔ∏è Schl√ºssel erfolgreich eingelesen!";
                qrCodeScanner.stop().then(() => video.style.display = "none");
              } catch (e) {
                alert("Ung√ºltiger Schl√ºssel");
              }
            },
            error => {}
          );
        }
      });
    }

    async function encryptText() {
      const text = document.getElementById("text-input").value;
      if (!aesCryptoKeyEncrypt) {
        alert("Bitte zuerst einen Schl√ºssel generieren oder scannen.");
        return;
      }

      const iv = crypto.getRandomValues(new Uint8Array(12));
      const encoded = new TextEncoder().encode(text);

      try {
        const ciphertext = await crypto.subtle.encrypt(
          { name: "AES-GCM", iv },
          aesCryptoKeyEncrypt,
          encoded
        );

        const output = {
          iv: btoa(String.fromCharCode(...iv)),
          data: btoa(String.fromCharCode(...new Uint8Array(ciphertext)))
        };

        document.getElementById("output").textContent = "Verschl√ºsselter Text (JSON):\n" + JSON.stringify(output, null, 2);
      } catch (e) {
        alert("Verschl√ºsselung fehlgeschlagen: " + e.message);
      }
    }

    async function decryptText() {
      const input = document.getElementById("encrypted-input").value.trim();
      if (!aesCryptoKeyDecrypt) {
        alert("Bitte zuerst einen Schl√ºssel scannen.");
        return;
      }

      let parsed;
      try {
        parsed = JSON.parse(input);
      } catch (e) {
        alert("Ung√ºltiges JSON.");
        return;
      }

      try {
        const iv = Uint8Array.from(atob(parsed.iv), c => c.charCodeAt(0));
        const data = Uint8Array.from(atob(parsed.data), c => c.charCodeAt(0));

        const decrypted = await crypto.subtle.decrypt(
          { name: "AES-GCM", iv },
          aesCryptoKeyDecrypt,
          data
        );

        const decoded = new TextDecoder().decode(decrypted);
        document.getElementById("decryption-output").textContent = "üîì Entschl√ºsselter Text:\n" + decoded;
      } catch (e) {
        alert("Entschl√ºsselung fehlgeschlagen: " + e.message);
      }
    }
  </script>
</body>
</html>